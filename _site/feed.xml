<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-09T16:01:42+05:30</updated><id>http://localhost:4000/</id><title type="html">Sidharth Kuruvila</title><subtitle>My thoughts on things tech.</subtitle><entry><title type="html">Human readable identifiers</title><link href="http://localhost:4000/2018/02/09/human-readable-identifiers.html" rel="alternate" type="text/html" title="Human readable identifiers" /><published>2018-02-09T15:49:00+05:30</published><updated>2018-02-09T15:49:00+05:30</updated><id>http://localhost:4000/2018/02/09/human-readable-identifiers</id><content type="html" xml:base="http://localhost:4000/2018/02/09/human-readable-identifiers.html">&lt;p&gt;This blog post came out of a conversation on how to design readable identifiers and what kinds of information can be put into them.&lt;/p&gt;

&lt;p&gt;What is an identifier? Let’s start with a real world example in the form of a licence plate (eg. DL 11 CAA 1111). The text of a licence plate uniquely identifies every car in india. It tells you where the the car was registered and it might be possible to guess when the car was registered. When you order a book on flipkart you get an 18 digit order id to track that order on the flipkart website (eg. OD387592…). A github ticket has a numeric id that increments with every new ticket added to a project. The ticket also has a url that uniquely identifies the ticket resource.&lt;/p&gt;

&lt;p&gt;Lets define some characteristics of a human readable identifier. It should be easy to share verbally when you call support or when telling a friend the id. It can contain useful information. Going back to the licence plate example, where the car was registered for example. It should be easy to remember all or part of the identifier.&lt;/p&gt;

&lt;p&gt;Now that we have defined the characteristics let’s look at some features that can help us achieve them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Separators&lt;/em&gt; can make the an identifier easier to read. For example credit card numbers are usually represented with between every four digits (eg. 4024 0071 6863 1462). You can read the number four digits at a time. Amazon’s order ids consist of three parts separated by hyphens, a numeric prefix, and two 7 digit numeric strings (eg. #171-6556543-4724335). We could take flipkart’s order id (eg. OD387592038728388000) and add some hyphens to it to form OD:387592-038728-388000. This is a lot easier to read.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Prefixes&lt;/em&gt; are another way of improving readability. Static prefixes (eg.OD…) make it possible to for you to tell the type of an identifier, OD for example might indicate that the identifier is an order. Prefixes can also contain useful information that you can use. A flight booking might contain the date on which the flight leaves which you can check on the way to the airport (eg. 17070134234). Or a film ticket id might be prefixed with a code for the theater the film is playing in  (eg. INRC…, Inox Rcity Mall). Numeric prefixes like amazon’s can be a bit harder to read but can still be useful, 171 for example appears to be used for orders from india and D01 is used for ebooks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Numeric identifiers&lt;/em&gt; are generally easier to share compared to alphanumeric ones but take more space (eg. OD3875… ). We need to take into account that decimal numbers do not map well to binary numbers. Hexadecimal identifiers advantage of fitting into binary strings  but are rarely used except for more technical applications like git commits. Alphanumeric ids can be harder to read than numeric one even though they take a lot less space, we could write the flipkart id as OD:2y0dws-hczzc4. We should avoid mixing case for example a and A in the same identifier as that would be harder to read aloud.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Context&lt;/em&gt; can help shorten identifiers. For example if orders ids are unique for a particular user there will be fewer order ids and shorter id lengths will be possible. Github does this with tickets ticket ids are incrementing numeric values and a ticket id is unique for a particular project (eg. https://github.com/sidharthkuruvila/ocaml-ide/issues/7)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Shorter identifiers&lt;/em&gt; are easier to remember and share. UUIDs make for bad identifiers, to guarantee uniqueness using a randomly generated id takes a lot of space, which in turn means that there is a lot more to read. Incrementing ids (eg. ID001, ID002, … , ID010,… ) can take a lot less space than randomly generated ids, we could encrypt the ids using some form of format preserving encryption. Making the prefix part of the unique id, can reduce the size of the changing part of the identifier, for example a date prefix (eg. 17070134234). Care should be taken, since the advantage would be lost if most identifiers share the same prefix, for example if the city name is the prefix and most business is done in a single city.&lt;/p&gt;

&lt;p&gt;Two more strategies can be considered if we are willing to give up on uniqueness as a constraint. A substring or a non-unique hash of a unique identifier can be used as the human readable version of the identifier.  The systems will have to be designed to handle the possibility of duplicate entities with the same shortened identifier. Some extra deduplication can be done using other available information, the user’s identity for example. Identifiers can be created with shorter lifespans to be returned back to a common pool of identifiers after some period of time.&lt;/p&gt;

&lt;p&gt;Here are a few points you should keep in mind when designing an identifier&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use separators to improve readability&lt;/li&gt;
  &lt;li&gt;Choose a suitable prefix or prefix strategy&lt;/li&gt;
  &lt;li&gt;Prefer numbers for the generated part of the identifiers&lt;/li&gt;
  &lt;li&gt;Choose a suitable identifier generation strategy.&lt;/li&gt;
  &lt;li&gt;Try to keep your identifiers small, or create a separate human readable identifier.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">This blog post came out of a conversation on how to design readable identifiers and what kinds of information can be put into them.</summary></entry><entry><title type="html">Move semantics in a gc language</title><link href="http://localhost:4000/2018/02/03/move-semantics-in-a-gc-language.html" rel="alternate" type="text/html" title="Move semantics in a gc language" /><published>2018-02-03T00:00:00+05:30</published><updated>2018-02-03T00:00:00+05:30</updated><id>http://localhost:4000/2018/02/03/move-semantics-in-a-gc-language</id><content type="html" xml:base="http://localhost:4000/2018/02/03/move-semantics-in-a-gc-language.html">&lt;p&gt;I’ve been learning c++ lately. The thing that kept me away from the language for a long time is the lack of automatic memory management. As a java programmer you get used to certain luxuries and not worrying about whether you are leaking memory is one of them.&lt;/p&gt;

&lt;p&gt;The garbage collector doesn’t manage all resources though, which is why we still have to explicitly close open files. This is quite easy to do thanks to the try with resource pattern available in both kotlin and java.&lt;/p&gt;

&lt;p&gt;(I’m going to use kotlin because the syntax is simpler, but the examples should be easily translated to java)&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;FileInputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;char = &quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//The file object is no longer in scope.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, there are limitations to this approach, the scope of the file object is delimited by curly braces. And it is not possible to pass the function object beyond the curly braces without bad things happening. You get used to living without the ability.&lt;/p&gt;

&lt;p&gt;C++ runs into similar problems of resource management, in c++’s case it applies to any object allocated on the heap. And c++ has a similar solution to the problem in the form of a pattern called &lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization&quot;&gt;RAII&lt;/a&gt;. With RAII an object on the stack will call its own destructor method before going out of scope.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Deleting resource instance &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resource_demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is before closing the code block&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is just after the code block&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ofcourse RAII has the same limitations of delimited scoping as the try with resource pattern. C++ 11 introduces a construct called move semantics to get around this.&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource_consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ownership of the resource transferred to resource_consumer&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The resource will be deleted on return of the method&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceDemo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_demo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;resource_consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This after the method call&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What happens is that the ownership of the unique pointer is transferred to the function resource_consumer and it deletes itself when that function exits.&lt;/p&gt;

&lt;p&gt;So what would move semantics look like on a jvm language?&lt;/p&gt;

&lt;p&gt;This can be done by introducing a new class &lt;code class=&quot;highlighter-rouge&quot;&gt;Movable&amp;lt;T&amp;gt;&lt;/code&gt; that demonstrates semantics similar to RAII for variables using the close method instead of a destructor.&lt;/p&gt;

&lt;p&gt;The c++ example can then be written as.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resource_consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;){&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The resource will close on return&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;resource_consumer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This after close&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;//Compile error if resource is use here
&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//println(resource);
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Methods should also be able to return movable resources&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;resource_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Movable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;movable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;demo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resource_provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The resource will close on return&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Movable fields are a bit tricky, it would be possible to automatically rewrite the close method in a class with movable fields to close them when the object itself is closed, but there could be ordering issues.&lt;/p&gt;

&lt;p&gt;Overloading class behaviour the way movable works might make code harder to read, on the other hand introducing a new keyword would simply clutter the syntax.&lt;/p&gt;

&lt;p&gt;Another possible extension in the same vein would be &lt;code class=&quot;highlighter-rouge&quot;&gt;Sharable&amp;lt;T&amp;gt;&lt;/code&gt; to add implicit reference counted resources.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been learning c++ lately. The thing that kept me away from the language for a long time is the lack of automatic memory management. As a java programmer you get used to certain luxuries and not worrying about whether you are leaking memory is one of them.</summary></entry></feed>